
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.39 (git sha1 00338082b, g++ 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: rob.v
Parsing formal SystemVerilog input from `rob.v' to AST representation.
rob.v:116: Warning: SystemVerilog does not allow "restrict" without "property".
rob.v:122: Warning: SystemVerilog does not allow "restrict" without "property".
rob.v:151: Warning: SystemVerilog does not allow "restrict" without "property".
rob.v:152: Warning: SystemVerilog does not allow "restrict" without "property".
Storing AST representation for module `$abstract\rob'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\rob'.
Generating RTLIL representation for module `\rob'.
Warning: Replacing memory \old with list of registers. See rob.v:68
Warning: Replacing memory \rdy with list of registers. See rob.v:67
Warning: Replacing memory \buffer with list of registers. See rob.v:66

2.2.1. Analyzing design hierarchy..
Top module:  \rob

2.2.2. Analyzing design hierarchy..
Top module:  \rob
Removing unused module `$abstract\rob'.
Removed 1 unused modules.
Module rob directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$rob.v:0$271 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:0$271 in module rob.
Removed 1 dead cases from process $proc$rob.v:0$267 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:0$267 in module rob.
Removed 1 dead cases from process $proc$rob.v:0$263 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:0$263 in module rob.
Removed 1 dead cases from process $proc$rob.v:0$260 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:0$260 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:168$236 in module rob.
Marked 1 switch rules as full_case in process $proc$rob.v:144$200 in module rob.
Removed 4 dead cases from process $proc$rob.v:55$50 in module rob.
Marked 33 switch rules as full_case in process $proc$rob.v:55$50 in module rob.
Removed a total of 8 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 63 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\rob.$proc$rob.v:0$282'.
  Set init value: \f_count = 4'0000
Found init rule in `\rob.$proc$rob.v:0$278'.
  Set init value: \f_past_valid = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `\rob.$proc$rob.v:144$200'.
Found async reset \i_rst_n in `\rob.$proc$rob.v:55$50'.

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~45 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rob.$proc$rob.v:0$282'.
Creating decoders for process `\rob.$proc$rob.v:0$279'.
Creating decoders for process `\rob.$proc$rob.v:0$278'.
Creating decoders for process `\rob.$proc$rob.v:0$275'.
Creating decoders for process `\rob.$proc$rob.v:0$271'.
     1/1: $1$mem2reg_rd$\rdy$rob.v:51$8_DATA[0:0]$273
Creating decoders for process `\rob.$proc$rob.v:0$267'.
     1/1: $1$mem2reg_rd$\rdy$rob.v:50$7_DATA[0:0]$269
Creating decoders for process `\rob.$proc$rob.v:0$263'.
     1/1: $1$mem2reg_rd$\rdy$rob.v:49$6_DATA[0:0]$265
Creating decoders for process `\rob.$proc$rob.v:0$260'.
     1/1: $1$mem2reg_rd$\rdy$rob.v:48$5_DATA[0:0]$262
Creating decoders for process `\rob.$proc$rob.v:168$236'.
     1/9: $cover$rob.v:185$257_EN
     2/9: $cover$rob.v:184$255_EN
     3/9: $cover$rob.v:182$253_EN
     4/9: $cover$rob.v:181$251_EN
     5/9: $cover$rob.v:180$249_EN
     6/9: $cover$rob.v:179$247_EN
     7/9: $cover$rob.v:178$245_EN
     8/9: $assert$rob.v:173$242_EN
     9/9: $assert$rob.v:171$240_EN
Creating decoders for process `\rob.$proc$rob.v:150$204'.
     1/6: $assert$rob.v:165$234_EN
     2/6: $assert$rob.v:164$231_EN
     3/6: $assert$rob.v:163$228_EN
     4/6: $assert$rob.v:160$223_EN
     5/6: $assert$rob.v:159$220_EN
     6/6: $assert$rob.v:158$217_EN
Creating decoders for process `\rob.$proc$rob.v:144$200'.
     1/1: $0\f_count[3:0]
Creating decoders for process `\rob.$proc$rob.v:120$199'.
Creating decoders for process `\rob.$proc$rob.v:55$50'.
     1/140: $2$mem2reg_wr$\rdy$rob.v:109$30_ADDR[3:0]$196
     2/140: $2$mem2reg_wr$\rdy$rob.v:109$30_DATA[0:0]$197
     3/140: $2$mem2reg_wr$\rdy$rob.v:108$29_ADDR[3:0]$194
     4/140: $2$mem2reg_wr$\rdy$rob.v:108$29_DATA[0:0]$195
     5/140: $2$mem2reg_wr$\rdy$rob.v:107$28_ADDR[3:0]$192
     6/140: $2$mem2reg_wr$\rdy$rob.v:107$28_DATA[0:0]$193
     7/140: $2$mem2reg_wr$\rdy$rob.v:106$27_ADDR[3:0]$190
     8/140: $2$mem2reg_wr$\rdy$rob.v:106$27_DATA[0:0]$191
     9/140: $2$mem2reg_wr$\rdy$rob.v:105$26_ADDR[3:0]$188
    10/140: $2$mem2reg_wr$\rdy$rob.v:105$26_DATA[0:0]$189
    11/140: $2$mem2reg_wr$\rdy$rob.v:104$25_ADDR[3:0]$186
    12/140: $2$mem2reg_wr$\rdy$rob.v:104$25_DATA[0:0]$187
    13/140: $2$mem2reg_rd$\old$rob.v:101$24_DATA[5:0]$185
    14/140: $2$mem2reg_rd$\old$rob.v:100$23_DATA[5:0]$183
    15/140: $2$mem2reg_rd$\old$rob.v:99$22_DATA[5:0]$181
    16/140: $2$mem2reg_rd$\old$rob.v:98$21_DATA[5:0]$179
    17/140: $2$mem2reg_wr$\old$rob.v:94$20_ADDR[3:0]$172
    18/140: $2$mem2reg_wr$\old$rob.v:94$20_DATA[5:0]$173
    19/140: $2$mem2reg_wr$\rdy$rob.v:93$19_ADDR[3:0]$170
    20/140: $2$mem2reg_wr$\rdy$rob.v:93$19_DATA[0:0]$171
    21/140: $2$mem2reg_wr$\buffer$rob.v:92$18_ADDR[3:0]$168
    22/140: $2$mem2reg_wr$\buffer$rob.v:92$18_DATA[56:0]$169
    23/140: $2$mem2reg_wr$\old$rob.v:88$17_ADDR[3:0]$163
    24/140: $2$mem2reg_wr$\old$rob.v:88$17_DATA[5:0]$164
    25/140: $2$mem2reg_wr$\rdy$rob.v:87$16_ADDR[3:0]$161
    26/140: $2$mem2reg_wr$\rdy$rob.v:87$16_DATA[0:0]$162
    27/140: $2$mem2reg_wr$\buffer$rob.v:86$15_ADDR[3:0]$159
    28/140: $2$mem2reg_wr$\buffer$rob.v:86$15_DATA[56:0]$160
    29/140: $2$mem2reg_wr$\old$rob.v:82$14_ADDR[3:0]$154
    30/140: $2$mem2reg_wr$\old$rob.v:82$14_DATA[5:0]$155
    31/140: $2$mem2reg_wr$\rdy$rob.v:81$13_ADDR[3:0]$152
    32/140: $2$mem2reg_wr$\rdy$rob.v:81$13_DATA[0:0]$153
    33/140: $2$mem2reg_wr$\buffer$rob.v:80$12_ADDR[3:0]$150
    34/140: $2$mem2reg_wr$\buffer$rob.v:80$12_DATA[56:0]$151
    35/140: $2$mem2reg_wr$\old$rob.v:76$11_ADDR[3:0]$145
    36/140: $2$mem2reg_wr$\old$rob.v:76$11_DATA[5:0]$146
    37/140: $2$mem2reg_wr$\rdy$rob.v:75$10_ADDR[3:0]$143
    38/140: $2$mem2reg_wr$\rdy$rob.v:75$10_DATA[0:0]$144
    39/140: $2$mem2reg_wr$\buffer$rob.v:74$9_ADDR[3:0]$141
    40/140: $2$mem2reg_wr$\buffer$rob.v:74$9_DATA[56:0]$142
    41/140: $1$mem2reg_wr$\rdy$rob.v:109$30_DATA[0:0]$139
    42/140: $1$mem2reg_wr$\rdy$rob.v:109$30_ADDR[3:0]$138
    43/140: $1$mem2reg_wr$\rdy$rob.v:108$29_DATA[0:0]$137
    44/140: $1$mem2reg_wr$\rdy$rob.v:108$29_ADDR[3:0]$136
    45/140: $1$mem2reg_wr$\rdy$rob.v:107$28_DATA[0:0]$135
    46/140: $1$mem2reg_wr$\rdy$rob.v:107$28_ADDR[3:0]$134
    47/140: $1$mem2reg_wr$\rdy$rob.v:106$27_DATA[0:0]$133
    48/140: $1$mem2reg_wr$\rdy$rob.v:106$27_ADDR[3:0]$132
    49/140: $1$mem2reg_wr$\rdy$rob.v:105$26_DATA[0:0]$131
    50/140: $1$mem2reg_wr$\rdy$rob.v:105$26_ADDR[3:0]$130
    51/140: $1$mem2reg_wr$\rdy$rob.v:104$25_DATA[0:0]$129
    52/140: $1$mem2reg_wr$\rdy$rob.v:104$25_ADDR[3:0]$128
    53/140: $0\o_ret_count[2:0]
    54/140: $0\o_ret_p3[5:0]
    55/140: $1$mem2reg_rd$\old$rob.v:101$24_DATA[5:0]$127
    56/140: $1$mem2reg_rd$\old$rob.v:101$24_ADDR[3:0]$126
    57/140: $0\o_ret_p2[5:0]
    58/140: $1$mem2reg_rd$\old$rob.v:100$23_DATA[5:0]$125
    59/140: $1$mem2reg_rd$\old$rob.v:100$23_ADDR[3:0]$124
    60/140: $0\o_ret_p1[5:0]
    61/140: $1$mem2reg_rd$\old$rob.v:99$22_DATA[5:0]$123
    62/140: $1$mem2reg_rd$\old$rob.v:99$22_ADDR[3:0]$122
    63/140: $0\o_ret_p0[5:0]
    64/140: $1$mem2reg_rd$\old$rob.v:98$21_DATA[5:0]$121
    65/140: $1$mem2reg_rd$\old$rob.v:98$21_ADDR[3:0]$120
    66/140: $0\tail[3:0]
    67/140: $1$mem2reg_wr$\old$rob.v:94$20_DATA[5:0]$119
    68/140: $1$mem2reg_wr$\old$rob.v:94$20_ADDR[3:0]$118
    69/140: $1$mem2reg_wr$\rdy$rob.v:93$19_DATA[0:0]$117
    70/140: $1$mem2reg_wr$\rdy$rob.v:93$19_ADDR[3:0]$116
    71/140: $1$mem2reg_wr$\buffer$rob.v:92$18_DATA[56:0]$115
    72/140: $1$mem2reg_wr$\buffer$rob.v:92$18_ADDR[3:0]$114
    73/140: $1$mem2reg_wr$\old$rob.v:88$17_DATA[5:0]$113
    74/140: $1$mem2reg_wr$\old$rob.v:88$17_ADDR[3:0]$112
    75/140: $1$mem2reg_wr$\rdy$rob.v:87$16_DATA[0:0]$111
    76/140: $1$mem2reg_wr$\rdy$rob.v:87$16_ADDR[3:0]$110
    77/140: $1$mem2reg_wr$\buffer$rob.v:86$15_DATA[56:0]$109
    78/140: $1$mem2reg_wr$\buffer$rob.v:86$15_ADDR[3:0]$108
    79/140: $1$mem2reg_wr$\old$rob.v:82$14_DATA[5:0]$107
    80/140: $1$mem2reg_wr$\old$rob.v:82$14_ADDR[3:0]$106
    81/140: $1$mem2reg_wr$\rdy$rob.v:81$13_DATA[0:0]$105
    82/140: $1$mem2reg_wr$\rdy$rob.v:81$13_ADDR[3:0]$104
    83/140: $1$mem2reg_wr$\buffer$rob.v:80$12_DATA[56:0]$103
    84/140: $1$mem2reg_wr$\buffer$rob.v:80$12_ADDR[3:0]$102
    85/140: $1$mem2reg_wr$\old$rob.v:76$11_DATA[5:0]$101
    86/140: $1$mem2reg_wr$\old$rob.v:76$11_ADDR[3:0]$100
    87/140: $1$mem2reg_wr$\rdy$rob.v:75$10_DATA[0:0]$99
    88/140: $1$mem2reg_wr$\rdy$rob.v:75$10_ADDR[3:0]$98
    89/140: $1$mem2reg_wr$\buffer$rob.v:74$9_DATA[56:0]$97
    90/140: $1$mem2reg_wr$\buffer$rob.v:74$9_ADDR[3:0]$96
    91/140: $0\head[3:0]
    92/140: $1\i[31:0]
    93/140: $0\old[15][5:0]
    94/140: $0\old[14][5:0]
    95/140: $0\old[13][5:0]
    96/140: $0\old[12][5:0]
    97/140: $0\old[11][5:0]
    98/140: $0\old[10][5:0]
    99/140: $0\old[9][5:0]
   100/140: $0\old[8][5:0]
   101/140: $0\old[7][5:0]
   102/140: $0\old[6][5:0]
   103/140: $0\old[5][5:0]
   104/140: $0\old[4][5:0]
   105/140: $0\old[3][5:0]
   106/140: $0\old[2][5:0]
   107/140: $0\old[1][5:0]
   108/140: $0\old[0][5:0]
   109/140: $0\rdy[15][0:0]
   110/140: $0\rdy[14][0:0]
   111/140: $0\rdy[13][0:0]
   112/140: $0\rdy[12][0:0]
   113/140: $0\rdy[11][0:0]
   114/140: $0\rdy[10][0:0]
   115/140: $0\rdy[9][0:0]
   116/140: $0\rdy[8][0:0]
   117/140: $0\rdy[7][0:0]
   118/140: $0\rdy[6][0:0]
   119/140: $0\rdy[5][0:0]
   120/140: $0\rdy[4][0:0]
   121/140: $0\rdy[3][0:0]
   122/140: $0\rdy[2][0:0]
   123/140: $0\rdy[1][0:0]
   124/140: $0\rdy[0][0:0]
   125/140: $0\buffer[15][56:0]
   126/140: $0\buffer[14][56:0]
   127/140: $0\buffer[13][56:0]
   128/140: $0\buffer[12][56:0]
   129/140: $0\buffer[11][56:0]
   130/140: $0\buffer[10][56:0]
   131/140: $0\buffer[9][56:0]
   132/140: $0\buffer[8][56:0]
   133/140: $0\buffer[7][56:0]
   134/140: $0\buffer[6][56:0]
   135/140: $0\buffer[5][56:0]
   136/140: $0\buffer[4][56:0]
   137/140: $0\buffer[3][56:0]
   138/140: $0\buffer[2][56:0]
   139/140: $0\buffer[1][56:0]
   140/140: $0\buffer[0][56:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\rob.$mem2reg_rd$\rdy$rob.v:51$8_DATA' from process `\rob.$proc$rob.v:0$271'.
No latch inferred for signal `\rob.$mem2reg_rd$\rdy$rob.v:50$7_DATA' from process `\rob.$proc$rob.v:0$267'.
No latch inferred for signal `\rob.$mem2reg_rd$\rdy$rob.v:49$6_DATA' from process `\rob.$proc$rob.v:0$263'.
No latch inferred for signal `\rob.$mem2reg_rd$\rdy$rob.v:48$5_DATA' from process `\rob.$proc$rob.v:0$260'.

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\rob.$past$rob.v:170$2$0' using process `\rob.$proc$rob.v:168$236'.
  created $dff cell `$procdff$4163' with positive edge clock.
Creating register for signal `\rob.$past$rob.v:173$3$0' using process `\rob.$proc$rob.v:168$236'.
  created $dff cell `$procdff$4164' with positive edge clock.
Creating register for signal `\rob.$past$rob.v:173$4$0' using process `\rob.$proc$rob.v:168$236'.
  created $dff cell `$procdff$4165' with positive edge clock.
Creating register for signal `\rob.\f_count' using process `\rob.$proc$rob.v:144$200'.
  created $adff cell `$procdff$4166' with positive edge clock and negative level reset.
Creating register for signal `\rob.\f_past_valid' using process `\rob.$proc$rob.v:120$199'.
  created $dff cell `$procdff$4167' with positive edge clock.
Creating register for signal `\rob.\o_ret_p0' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4168' with positive edge clock and negative level reset.
Creating register for signal `\rob.\o_ret_p1' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4169' with positive edge clock and negative level reset.
Creating register for signal `\rob.\o_ret_p2' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4170' with positive edge clock and negative level reset.
Creating register for signal `\rob.\o_ret_p3' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4171' with positive edge clock and negative level reset.
Creating register for signal `\rob.\o_ret_count' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4172' with positive edge clock and negative level reset.
Creating register for signal `\rob.\head' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4173' with positive edge clock and negative level reset.
Creating register for signal `\rob.\tail' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4174' with positive edge clock and negative level reset.
Creating register for signal `\rob.\i' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4175' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[0]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4176' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[1]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4177' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[2]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4178' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[3]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4179' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[4]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4180' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[5]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4181' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[6]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4182' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[7]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4183' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[8]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4184' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[9]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4185' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[10]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4186' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[11]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4187' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[12]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4188' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[13]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4189' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[14]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4190' with positive edge clock and negative level reset.
Creating register for signal `\rob.\buffer[15]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4191' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[0]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4192' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[1]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4193' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[2]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4194' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[3]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4195' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[4]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4196' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[5]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4197' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[6]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4198' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[7]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4199' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[8]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4200' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[9]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4201' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[10]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4202' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[11]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4203' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[12]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4204' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[13]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4205' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[14]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4206' with positive edge clock and negative level reset.
Creating register for signal `\rob.\rdy[15]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4207' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[0]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4208' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[1]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4209' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[2]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4210' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[3]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4211' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[4]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4212' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[5]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4213' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[6]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4214' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[7]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4215' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[8]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4216' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[9]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4217' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[10]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4218' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[11]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4219' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[12]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4220' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[13]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4221' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[14]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4222' with positive edge clock and negative level reset.
Creating register for signal `\rob.\old[15]' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4223' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:74$9_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4224' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:74$9_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4225' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:75$10_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4226' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:75$10_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4227' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:76$11_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4228' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:76$11_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4229' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:80$12_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4230' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:80$12_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4231' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:81$13_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4232' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:81$13_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4233' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:82$14_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4234' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:82$14_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4235' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:86$15_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4236' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:86$15_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4237' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:87$16_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4238' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:87$16_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4239' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:88$17_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4240' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:88$17_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4241' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:92$18_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4242' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\buffer$rob.v:92$18_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4243' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:93$19_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4244' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:93$19_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4245' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:94$20_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4246' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\old$rob.v:94$20_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4247' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:98$21_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4248' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:98$21_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4249' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:99$22_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4250' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:99$22_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4251' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:100$23_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4252' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:100$23_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4253' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:101$24_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4254' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_rd$\old$rob.v:101$24_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4255' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:104$25_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4256' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:104$25_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4257' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:105$26_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4258' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:105$26_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4259' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:106$27_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4260' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:106$27_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4261' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:107$28_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4262' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:107$28_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4263' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:108$29_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4264' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:108$29_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4265' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:109$30_ADDR' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4266' with positive edge clock and negative level reset.
Creating register for signal `\rob.$mem2reg_wr$\rdy$rob.v:109$30_DATA' using process `\rob.$proc$rob.v:55$50'.
  created $adff cell `$procdff$4267' with positive edge clock and negative level reset.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `rob.$proc$rob.v:0$282'.
Removing empty process `rob.$proc$rob.v:0$279'.
Removing empty process `rob.$proc$rob.v:0$278'.
Removing empty process `rob.$proc$rob.v:0$275'.
Found and cleaned up 1 empty switch in `\rob.$proc$rob.v:0$271'.
Removing empty process `rob.$proc$rob.v:0$271'.
Found and cleaned up 1 empty switch in `\rob.$proc$rob.v:0$267'.
Removing empty process `rob.$proc$rob.v:0$267'.
Found and cleaned up 1 empty switch in `\rob.$proc$rob.v:0$263'.
Removing empty process `rob.$proc$rob.v:0$263'.
Found and cleaned up 1 empty switch in `\rob.$proc$rob.v:0$260'.
Removing empty process `rob.$proc$rob.v:0$260'.
Found and cleaned up 3 empty switches in `\rob.$proc$rob.v:168$236'.
Removing empty process `rob.$proc$rob.v:168$236'.
Found and cleaned up 6 empty switches in `\rob.$proc$rob.v:150$204'.
Removing empty process `rob.$proc$rob.v:150$204'.
Removing empty process `rob.$proc$rob.v:144$200'.
Removing empty process `rob.$proc$rob.v:120$199'.
Found and cleaned up 32 empty switches in `\rob.$proc$rob.v:55$50'.
Removing empty process `rob.$proc$rob.v:55$50'.
Cleaned up 45 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.
<suppressed ~37 debug messages>

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rob..
Removed 301 unused cells and 879 unused wires.
<suppressed ~319 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module rob...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rob'.
<suppressed ~414 debug messages>
Removed a total of 138 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rob..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~439 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rob.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rob'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rob..
Removed 0 unused cells and 144 unused wires.
<suppressed ~1 debug messages>

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.

2.8.8. Rerunning OPT passes. (Maybe there is more to do..)

2.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rob..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~433 debug messages>

2.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rob.
Performed a total of 0 changes.

2.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rob'.
Removed a total of 0 cells.

2.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rob..

2.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.

2.8.14. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 30 bits (of 32) from port B of cell rob.$gt$rob.v:46$33 ($gt).
Removed top 31 bits (of 32) from port B of cell rob.$gt$rob.v:46$34 ($gt).
Removed top 31 bits (of 32) from port B of cell rob.$gt$rob.v:49$38 ($gt).
Removed top 30 bits (of 32) from port B of cell rob.$gt$rob.v:50$41 ($gt).
Removed top 1 bits (of 4) from port B of cell rob.$eq$rob.v:51$44 ($eq).
Removed top 1 bits (of 3) from port Y of cell rob.$add$rob.v:52$47 ($add).
Removed top 1 bits (of 3) from port A of cell rob.$add$rob.v:52$48 ($add).
Removed top 31 bits (of 32) from port B of cell rob.$add$rob.v:75$148 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:75$148 ($add).
Removed top 31 bits (of 32) from port B of cell rob.$add$rob.v:81$157 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:81$157 ($add).
Removed top 30 bits (of 32) from port B of cell rob.$add$rob.v:100$182 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:100$182 ($add).
Removed top 30 bits (of 32) from port B of cell rob.$add$rob.v:101$184 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:101$184 ($add).
Removed top 28 bits (of 32) from port A of cell rob.$sub$rob.v:113$198 ($sub).
Removed top 28 bits (of 32) from port Y of cell rob.$sub$rob.v:113$198 ($sub).
Removed top 28 bits (of 32) from port B of cell rob.$le$rob.v:154$210 ($le).
Removed top 28 bits (of 32) from port A of cell rob.$sub$rob.v:156$214 ($sub).
Removed top 27 bits (of 32) from port Y of cell rob.$sub$rob.v:156$214 ($sub).
Removed top 2 bits (of 3) from port B of cell rob.$eq$rob.v:179$248 ($eq).
Removed top 1 bits (of 3) from port B of cell rob.$eq$rob.v:180$250 ($eq).
Removed top 1 bits (of 3) from port B of cell rob.$eq$rob.v:181$252 ($eq).
Removed top 31 bits (of 32) from port B of cell rob.$add$rob.v:49$266 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:49$266 ($add).
Removed top 30 bits (of 32) from port B of cell rob.$add$rob.v:50$270 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:50$270 ($add).
Removed top 30 bits (of 32) from port B of cell rob.$add$rob.v:51$274 ($add).
Removed top 28 bits (of 32) from port Y of cell rob.$add$rob.v:51$274 ($add).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$292_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$293_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$294_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$295_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$296_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$297_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$298_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$309_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$310_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$311_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$312_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$313_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$314_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$315_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$326_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$327_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$328_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$329_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$330_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$331_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$332_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$343_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$344_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$345_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$346_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$347_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$348_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$349_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$1000_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$1016_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$1032_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$1048_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$1064_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1081_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1098_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1115_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1132_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1150_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1168_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1186_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$1204_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$1223_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$1242_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$1261_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$1280_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2053_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2079_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2092_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2105_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2118_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2131_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2144_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2157_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2170_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2184_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2198_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2212_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2226_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2240_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2254_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2268_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2282_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2296_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2310_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2325_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2340_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2355_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2385_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2400_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2415_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2430_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2445_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2460_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2540_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2556_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2572_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2588_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2604_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell rob.$procmux$2620_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2705_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2722_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2739_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2756_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2773_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2790_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2880_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2898_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2916_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2934_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2952_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rob.$procmux$2970_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3065_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3084_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3103_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3122_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3141_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell rob.$procmux$3160_CMP0 ($eq).
Removed top 28 bits (of 32) from wire rob.$add$rob.v:49$266_Y.
Removed top 28 bits (of 32) from wire rob.$add$rob.v:50$270_Y.
Removed top 28 bits (of 32) from wire rob.$add$rob.v:51$274_Y.
Removed top 1 bits (of 3) from wire rob.$add$rob.v:52$47_Y.

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rob..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rob.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rob'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rob..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== rob ===

   Number of wires:                802
   Number of wire bits:           1931
   Number of public wires:          64
   Number of public wire bits:     458
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                813
     $add                           14
     $adff                          40
     $check                         23
     $dff                            4
     $eq                           220
     $gt                             4
     $le                             4
     $logic_and                      7
     $logic_not                     23
     $mux                          459
     $not                            1
     $pmux                           8
     $reduce_bool                    2
     $sub                            4

2.14. Executing CHECK pass (checking for obvious problems).
Checking module rob...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \rob

3.2. Analyzing design hierarchy..
Top module:  \rob
Removed 0 unused modules.
Module rob directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 4 unique messages, 7 total
End of script. Logfile hash: 295b97d2b2, CPU: user 0.99s system 0.03s, MEM: 33.62 MB peak
Yosys 0.39 (git sha1 00338082b, g++ 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)
Time spent: 22% 6x opt_expr (0 sec), 18% 5x opt_clean (0 sec), ...
